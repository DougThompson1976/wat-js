#+AUTHOR: Manuel Simoni
#+TITLE: Wat Language Manual
#+EMAIL: msimoni@gmail.com
#+OPTIONS: toc:t num:nil creator:nil
#+STYLE: <link rel="stylesheet" type="text/css" href="stylesheet.css"/>

* Description

/Wat/ is an ultra-lightweight dialect of Lisp, specifically
[[http://web.cs.wpi.edu/~jshutt/kernel.html][Kernel]], in which
everything is first-class: syntax, control, and data.  Syntax is based
on lexically-scoped fexprs and first-class environments, subsuming
ordinary procedures and hygienic macros.  Control is based on
delimited continuations and tail-call elimination, subsuming all
computational effects.  Data uses a dynamic type-tagging system that
allows generic programming over built-in as well as user-defined data
types.

Wat is hosted at <https://github.com/manuel/wat-js>.

This manual assumes familiarity with Kernel and Scheme.

* Lexical Structure

Wat has a mostly Scheme-like lexical structure, incompletely described
by the following table:

| ; ...                                         | /line comment/               |
| . + - [0-9]+                                  | /number/                     |
| #t #f                                         | /logical constants/          |
| #void #ign                                    | /void and ignore constants/  |
| " ... "                                       | /string/                     |
| \\ \" \n \r \t                                | /escape character in string/ |
| ( ... )                                       | /list/                       |
| ( a b . c )                                   | /dotted list/                |
| ()                                            | /nil/                        |
| a-z A-Z 0-9 - & ! : = > < % + ? / * # $ _ ' . | /symbol characters/          |
| '<expr>                                       | /short for/ =(quote <expr>)= |

Wat identifiers are case-sensitive.

* Built-in Types

 * Void :: The constant =#void= is used when there is no interesting
   value to return, or when a value is unspecified.

 * Ignore :: The constant =#ign= is used in parameter lists to indicate
   that an argument is ignored and should not be bound in the
   combiner's environment.

 * Boolean :: The =#t= constant represents logical truth and the =#f=
   constant represents logical falsity.

 * Nil and Pair :: Lists are built from immutable pairs and nil.
   Notably, lists often contain not only symbols and literals (as is
   usual in Lisp) but also first-class objects such as combiners.

 * Symbol :: Symbols are used as identifiers for variable bindings.
   It is not guaranteed that symbols with the same name are pointer
   identical.

 * String :: Wat currently only supports UTF-16 encoded Unicode
   strings.

 * Number :: Wat currently only supports IEEE 754 floating-point
   numbers.

 * Vector :: An array of objects.

 * Operative :: A combiner that operates directly on its operands.

 * Applicative :: A combiner that evaluates its operands, yielding an
   arguments list, which it passes to an underlying combiner.

 * Environment :: An environment maps symbols to values.  It may have
   a parent environment in which symbols are looked up if they are not
   found in this environment.

 * Type :: A first-class type tag or just type is associated with
   every object.

 * Continuation :: Continuations are first-class objects, not wrapped
   in an applicative.

* Pattern Matching

As in Kernel, parameters and left-hand sides of definitions may not
only be symbols, but parameter trees: a parameter tree is either a
symbol, a cons, nil, or ignore.  A symbol binds the right hand to its
name, a cons recursively matches its car and cdr, nil matches only
nil, and ignore simply ignores the right-hand side.

Examples:

| Left-hand side | Right-hand side | Match results         |
|----------------+-----------------+-----------------------|
| a              | (1 (2) 3)       | a → (1 (2) 3)         |
| (a . b)        | (1 (2) 3)       | a → 1, b → ((2) 3)    |
| (a b c)        | (1 (2) 3)       | a → 1, b → (2), c → 3 |
| (a (b) . #ign) | (1 (2) 3)       | a → 1, b → 2          |

* Combiners

All computations in Wat are carried out by combiners, of which there
are two different kinds: operative and applicative.  An operative
combiner or just operative is a fexpr that receives the current
lexical environment and acts on its operand tree unevaluated.  An
applicative combiner or just applicative is a procedure that first
evaluates its operand tree and then passes the obtained arguments list
to an underlying combiner.  =vau= is the constructor of user-defined
operatives, called compound operatives.  =wrap= creates an applicative
around an underlying combiner.

Examples:

| Combiner                | Operand Tree  | Result                      |
|-------------------------+---------------+-----------------------------|
| =(vau x #ign x)=       | (1 (+ 2 3) 4) | (1 (+ 2 3) 4)               |
| =(vau #ign e e)=       | (1 (+ 2 3) 4) | /<the current environment>/ |
| =(wrap (vau x #ign x))= | (1 (+ 2 3) 4) | (1 5 4)                     |

* Core

The core contains primitive functionality that could not be
implemented in Wat itself (or it would be cumbersome to do so).

** Basics
*** =def <lhs> <rhs> → rhs= [operative]

Evaluates the right-hand side, matches the left-hand side against it
in the current environment, and returns it.

*** =begin . <exprs> → result= [operative]

Evaluates expressions from left to right, returning the value of the
last.  As a special case, =(begin)= returns void.

Note: =begin= could be implemented in the library, but for performance
reasons is built into the core.

*** =if <test> <then> <else> → result= [operative]

Evaluates the test, and if it is false evaluates the else branch,
otherwise evaluates the then branch.  The branches are evaluated in
tail position.

*** =cons <car> <cdr> → cons= [applicative]

Creates a new cons with the given car and cdr.

*** =eq? <a> <b> → boolean= [applicative]

Returns true if the two values are pointer identical, false otherwise.

Note: it is advised against using =eq?= except in special
circumstances.  Because not even symbols or small numbers that "are
the same" are guaranteed to be =eq?=, it can be confusing.  The
generic equality predicate @<code>=@</code> should almost always be
used instead.

*** =identity-hash-code <obj> → number= [applicative]

Returns the system-determined identity hash code of the object, which
is equal if two objects are =eq?=.  It is unlikely that two different
objects have the same identity hash code.

** Combiners and Environments
*** =vau <ptree> <envp> <body> → operative= [operative]

Constructs a new compound operative that closes over the current
environment with the given parameter tree, environment parameter, and
body expression.

*** =eval <expr> <env> → result= [applicative]

Evaluates the expression in the given environment.  The expression is
evaluated in tail-position.

*** =wrap <cmb> → applicative= [applicative]

Returns an applicative around an underlying combiner.

*** =unwrap <cmb> → combiner= [applicative]

Returns the underlying combiner of an applicative.

*** =make-environment [<parent>] → environment= [applicative]

Creates a new empty environment with the given optional parent.

*** =bound? <sym> <env> → boolean= [applicative]

Returns true if a symbol is bound in the environment, false otherwise.

** Control

These are the control operators from Dybvig, Jones, and Sabry's
[[http://www.cs.indiana.edu/~dyb/pubs/monadicDC.pdf][/A Monadic
Framework for Delimited Continuations/]] that are able to express all
other delimited control operators.

*** =make-prompt → prompt= [applicative]

Creates a fresh prompt.

*** =push-prompt* <prompt> <thunk> → result= [applicative]

Pushes the continuation-delimiting prompt and executes thunk in the
new continuation.

*** =take-sub-cont* <prompt> <cmb> → result= [applicative]

Aborts up to and including the prompt, and calls the combiner with a
single argument representing the delimited continuation from the call
to =take-sub-cont*= up to but not including the prompt.

*** =push-sub-cont* <cont> <thunk> → result= [applicative]

Prepends the delimited continuation to the current continuation, and
executes thunk in the new continuation.

** Types
*** =make-type → (type tagger untagger)= [applicative]

Returns a list containing:

 * a fresh first-class type;

 * an applicative, the tagger, that takes a value and tags it with the
   type;

 * an applicative, the untagger, that takes a tagged object created by
   the tagger and returns its value.

The untagger only untags objects created by the tagger.

*** =type-of <val> → type= [applicative]

Returns an object's type.  Every object has a type, whether built-in
objects or tagged objects.

** System

*** =read → form= [applicative]

Reads a form from the console and returns it.

*** =display <msg> → msg= [applicative]

Prints a message string to the console and returns it.

*** =fail <reason> → |= [applicative]

Halts evaluation with an object describing the reason (typically an error).

** Vectors

*** =vector . <elements> → vector= [applicative]

Creates a new vector with the given elements.

*** =vector-ref <vector> <index> → element= [applicative]

Returns the vector's element at the given index.

*** =vector-set! <vector> <index> <element> → element= [applicative]

Updates the vector's element at the given index and returns it.

*** =vector-length <vector> → number= [applicative]

Returns the number of elements in the vector.

** Conversions

*** =string->symbol=, =symbol->string=, =string->number=, =number->string= [applicatives]
* Library

The library consists of definitions written in Wat itself.

** Types

*** =Void=, =Ign=, =Boolean=, =Nil=, =Pair=, =Symbol=, =String=, =Number=, =Applicative=, =Operative=, =Environment=, =Vector=, =Type= [variables]

Type constants for built-in types.

*** =void?=, =ign?=, =boolean?=, =null?=, =pair?=, =symbol?=, =string?=, =number?=, =applicative?=, =operative?=, =environment?=, =vector?=, =type?= [applicatives]

Type predicates for built-in types.

** Common

*** =lambda <ptree> . <exprs> → applicative= [operative]

Creates an applicative combiner, as in Scheme.

*** =apply <apv> <args> → result= [applicative]

Applies an applicative to an arguments list.

*** =set! <env> <lhs> <rhs> → rhs= [operative]

Updates the left-hand side bindings by matching it against the
right-hand side in the given environment.

*** =quote <form> → form= [operative]

Returns form unevaluated.

*** =define <lhs> <rhs> → result= [operative]

Scheme-like =define= with two cases:

 * =(define <name> <value>)= simply binds name to value, returning value.

 * =(define (<name> . <params>) . <body>)= binds name to an
   applicative with the given parameters and body expressions,
   returning the applicative.

*** =define-syntax <lhs> <rhs> → result= [operative]

Scheme-like =define-syntax= with two cases:

 * =(define-syntax <name> <value>)= simply binds name to value,
   returning value.

 * =(define-syntax (<name> . <params>) <envparam> . <body>)= binds
   name to an operative with the given parameters, environment
   parameter, and body expressions, returning the operative.

*** =provide <names> . <exprs> → result= [operative]

Performs expressions in a new lexical scope and exports only listed
names to the outer scope.

#+BEGIN_EXAMPLE
(provide (foo bar)
  (def foo 1)
  (def bar 2)
  (def quux 3)
)
foo → 1
bar → 2
quux → error: unbound variable
#+END_EXAMPLE

*** =define-record-type <name> <ctor> <pred> . <fields> → type= [operative]

Defines a new record type with the given name.

=ctor= is of the form =(ctor-name . ctor-args)=.  =ctor-name= is bound
to a function that takes =ctor-args=, which must be record field
names, as arguments, and creates a new instance of the record type
with the given fields initialized to the arguments.

=pred= is bound to a function of one argument that returns true iff an
object is an instance of the record type.

Each element of =fields= is of the form:

 * =(name accessor-name)=, or

 * =(name accessor-name modifier-name)=.

#+BEGIN_EXAMPLE
(define-record-type pare
  (kons kar kdr)
  pare?
  (kar kar set-kar!)
  (kdr kdr set-kdr!))
#+END_EXAMPLE

** Pairs and Lists

*** =car <pair> → value= [applicative]

Contents of the Address part of Register.

*** =cdr <pair> → value= [applicative]

Contents of the Decrement part of Register.

*** =caar=, =cadr=, =cdar=, =cddr= [applicatives]

Combinations of =car= and =cdr=, e.g. =(cadr x)= === =(car (cdr x))=.

*** =list . <vals> → list= [applicative]

Constructs a nil-terminated list containing the values.

*** =list* . <vals> → list= [applicative]

Constructs a list of the values, terminated by the last value.

** Hashtables

*** =Hashtable= [variable], =hashtable?= [applicative]

Hashtable type and type predicate.

*** =make-hashtable <hashfn> <eqfn> → hashtable= [applicative]

Creates a new hashtable with the given hash function and equality function.

*** =make-identity-hashtable → hashtable= [applicative]

Creates a new hashtable with =identity-hash-code= as hash function and =eq?= as
equality function.

*** =make-generic-hashtable → hashtable= [applicative]

Creates a new hashtable with =hash-code= as hash function and
@<code>=@</code> as equality function.

*** =hashtable-put! <hashtable> <key> <val> → val= [applicative]

Associates key with value in hashtable.

*** =hashtable-get <hashtable> <key> → val= [applicative]

Retrieves value associated with key from hash, or signals an error if
key is unbound.

** Generic Functions

*** =define-generic (<name> . <args>) . [<body>] → generic= [operative]

Defines a new generic function.  If the optional body expressions are
supplied, a default method is installed that will be used when no
type-specific method is found.

*** =define-method (<name> (<self> <type>) . <args>) . <body> → method= [operative]

Adds a method to a generic function.

#+BEGIN_EXAMPLE
(define-generic (->number obj))
(define-method (->number (self Number))
  self)
(define-method (->number (self String))
  (string->number self))
(define-method (->number (self Symbol))
  (string->number (symbol->string self)))
#+END_EXAMPLE

*** @<code>= <a> <b> → boolean@</code> [generic]

Generic equality predicate.  Different types may attach different
methods to this generic function.  If no method is defined for a type,
falls back to =eq?=.

Methods for the following types are predefined:

 * Two symbols are equal if they have the same string name.

 * Two numbers are equal if they are the same numerically.

 * Two strings are equal if they contain the same code points.

*** =hash-code <obj> → number= [generic]

Generic hash function.  Different types may attach different methods
to this generic function.  If no method is defined for a type, falls
back to =identity-hash-code=.

If two objects are generically equal by @<code>=@</code>, their
generic hash codes must be equal, too.  Conversely, if two objects
have different generic hash codes, they cannot be generically equal.

*** =->string <obj> → string= [generic]

Generic string conversion function.  Turns any object into a string.
Methods are defined for all built-in types.

** Dynamic Binding

These are the operators from Kiselyov, Shan, and Sabry's
[[http://okmij.org/ftp/papers/DDBinding.pdf][/Delimited Dynamic Binding/]].

*** =dnew → dynamic= [applicative]

Creates a new dynamically-bound variable.

*** =dlet <dynamic> <value> . <exprs> → result= [operative]

Performs expressions with the dynamic variable bound to the value.

*** =dref <dynamic> → value= [applicative]

Retrieves the dynamically-bound value of a dynamic variable.

* Danger Zone

This is the place for all kinds of tasteless things.

** JavaScript Object Bridge

The JavaScript object system is treacherous, so we don't even attempt
to somehow integrate it with Wat's.  It is urged to convert JavaScript
objects to Wat objects as early as possible with =from-js=, and
convert Wat objects to JavaScript objects as late as possible with
=to-js=.  JavaScript objects may not implement all Wat object
functionality, such as identity hash codes.

*** =js-global <string> → result= [applicative]

Returns value of JavaScript global variable with given name.

*** =js-set-global! <string> <val> → val= [applicative]

Updates value of JavaScript global variable with given name and returns it.

*** =js-prop <object> <string> → result= [applicative]

Returns value of JavaScript member variable with given name of object.

*** =js-set-prop! <object> <string> <val> → val= [applicative]

Updates value of JavaScript member variable with given name of object
and returns it.

*** =js-function <jsfun> → applicative= [applicative]

Creates an applicative that when called will call the given JavaScript
function with the arguments it received.

*** =js-method <string> → cmb= [applicative]

Creates an applicative that when called on an object and zero or more
arguments will invoke the method with the given string name of the
object with the given arguments.

*** =to-js <obj> → jsobj= [applicative]

Tries to convert a Wat object, such as a string, to a similar
JavaScript object.
 
*** =from-js <js-obj> → obj= [applicative]

Tries to convert a JavaScript object, such as a string, to a similar
Wat object.


** JavaScript Event Pollsets

When Wat code needs to wait for a JavaScript event, such as a mouse
click or textfield input, the execution context (fiber) needs to be
suspended.  This mechanism of suspending while waiting for events is
offered in the form of =epoll=-style pollsets.

*** =make-pollset → pollset= [applicative]

Creates a pollset for waiting on JS events.

A pollset contains a queue of JS events.

*** =pollset-callback <pollset> → jsfun= [applicative]

Returns a native JS function that can be used as single-argument
callback on e.g. DOM elements.

Events delivered to the callback will be added to the pollset's queue.

*** =pollset-wait <pollset> → event= [applicative]

If the pollset's queue is non-empty, return the oldest event and
remove it from the queue.

If the pollset's queue is empty, block the fiber until an event
occurs.

** Debugging Interface

*** =stacktrace <depth> → list= [applicative]

Returns a list of stack frames, up to the given depth.

*** =label <obj> → string= [applicative]

Returns the descriptive label of an object.

*** =set-label! <obj> <string> → string= [applicative]

Updates the descriptive label of an object.

*** =debug-info <obj> → whatever= [applicative]

Returns arbitrary debugging information about an object.  For
continuation frames, this will typically be the expression that
created them.

*** =trap <exc> → |= [applicative]

If an applicative named =trap= is defined in the top-level
environment, it will be called when an error (such as variable
unbound) happens during evaluation.

The trap should abort to a known good continuation, the current one is
broken and must not be resumed.

* Wat Programming Language

/Wat/ is an ultra-lightweight dialect of Lisp, specifically Kernel, in
which everything is first-class: syntax, control, and data.  Syntax is
based on lexically-scoped fexprs and first-class environments,
subsuming ordinary procedures and hygienic macros.  Control is based
on delimited continuations and tail-call elimination, subsuming all
computational effects.  Data uses a dynamic type-tagging system that
allows generic programming over built-in as well as user-defined data
types.

The Wat Language Manual is online at
<http://manuel.github.com/wat-js/doc/manual.html>.

** Wat on the WWW

Try Wat online with a rudimentary REPL at
<http://manuel.github.com/wat-js/browser/>.

** Wat on the PC

Execute =./wat=.  (Requires SpiderMonkey command-line JS interpreter.)

** About =wat-js=

=wat-js= is an inefficient but tractable interpreter for Wat written
in JavaScript.  Its architecture is inspired by Tony Garnock-Jones'
[[https://github.com/tonyg/js-vau][js-vau]].  For parsing, it uses Chris Double's [[https://github.com/doublec/jsparse][jsparse]].  The file
=crust.wat= (re-)uses code from John Shutt's [[http://web.cs.wpi.edu/~jshutt/kernel.html][SINK]], Oleg Kiselyov,
Chung-chieh Shan, and Amr Sabry's [[http://okmij.org/ftp/Computation/dynamic-binding.html][Delimited Dynamic Binding]], and Oleg
Kiselyov's [[http://okmij.org/ftp/continuations/implementations.html#dynamic-wind][Delimited continuations do dynamic-wind]].  The
implementation of metacontinuations follows R. Kent Dybvig, Simon
Peyton Jones, and Amr Sabry's [[http://www.cs.indiana.edu/~dyb/pubs/monadicDC.pdf][A Monadic Framework for Delimited
Continuations]].

** Licensing

=wat-js= is released under the MIT License.
